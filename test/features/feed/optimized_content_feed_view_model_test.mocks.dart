// Mocks generated by Mockito 5.4.5 from annotations
// in starlist/test/features/feed/optimized_content_feed_view_model_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:starlist/src/core/cache/cache_manager.dart' as _i5;
import 'package:starlist/src/core/logging/logger.dart' as _i13;
import 'package:starlist/src/features/auth/models/user_model.dart' as _i6;
import 'package:starlist/src/features/content/models/content_model.dart' as _i2;
import 'package:starlist/src/features/content/services/content_service.dart'
    as _i3;
import 'package:starlist/src/features/payment/models/payment_model.dart' as _i7;
import 'package:starlist/src/features/privacy/models/privacy_settings.dart'
    as _i8;
import 'package:starlist/src/features/ranking/models/ranking_entry.dart' as _i9;
import 'package:starlist/src/features/subscription/models/subscription_plan.dart'
    as _i10;
import 'package:starlist/src/features/subscription/models/subscription_status.dart'
    as _i11;
import 'package:starlist/src/features/youtube/models/youtube_video.dart'
    as _i12;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeContentModel_0 extends _i1.SmartFake implements _i2.ContentModel {
  _FakeContentModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ContentService].
///
/// See the documentation for Mockito's code generation for more information.
class MockContentService extends _i1.Mock implements _i3.ContentService {
  MockContentService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.ContentModel>> getContents({
    int? page = 1,
    int? limit = 20,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getContents,
          [],
          {
            #page: page,
            #limit: limit,
          },
        ),
        returnValue:
            _i4.Future<List<_i2.ContentModel>>.value(<_i2.ContentModel>[]),
      ) as _i4.Future<List<_i2.ContentModel>>);

  @override
  _i4.Future<_i2.ContentModel> getContentById(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getContentById,
          [id],
        ),
        returnValue: _i4.Future<_i2.ContentModel>.value(_FakeContentModel_0(
          this,
          Invocation.method(
            #getContentById,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.ContentModel>);

  @override
  _i4.Future<_i2.ContentModel> createContent(_i2.ContentModel? content) =>
      (super.noSuchMethod(
        Invocation.method(
          #createContent,
          [content],
        ),
        returnValue: _i4.Future<_i2.ContentModel>.value(_FakeContentModel_0(
          this,
          Invocation.method(
            #createContent,
            [content],
          ),
        )),
      ) as _i4.Future<_i2.ContentModel>);

  @override
  _i4.Future<_i2.ContentModel> updateContent(
    String? id,
    _i2.ContentModel? content,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateContent,
          [
            id,
            content,
          ],
        ),
        returnValue: _i4.Future<_i2.ContentModel>.value(_FakeContentModel_0(
          this,
          Invocation.method(
            #updateContent,
            [
              id,
              content,
            ],
          ),
        )),
      ) as _i4.Future<_i2.ContentModel>);

  @override
  _i4.Future<void> deleteContent(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteContent,
          [id],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> likeContent(String? id) => (super.noSuchMethod(
        Invocation.method(
          #likeContent,
          [id],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> unlikeContent(String? id) => (super.noSuchMethod(
        Invocation.method(
          #unlikeContent,
          [id],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> shareContent(String? id) => (super.noSuchMethod(
        Invocation.method(
          #shareContent,
          [id],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [CacheManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockCacheManager extends _i1.Mock implements _i5.CacheManager {
  MockCacheManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> cacheUser(_i6.UserModel? user) => (super.noSuchMethod(
        Invocation.method(
          #cacheUser,
          [user],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i6.UserModel?> getCachedUser(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCachedUser,
          [userId],
        ),
        returnValue: _i4.Future<_i6.UserModel?>.value(),
      ) as _i4.Future<_i6.UserModel?>);

  @override
  _i4.Future<void> cachePayments(
    String? userId,
    List<_i7.PaymentModel>? payments,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #cachePayments,
          [
            userId,
            payments,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i7.PaymentModel>?> getCachedPayments(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCachedPayments,
          [userId],
        ),
        returnValue: _i4.Future<List<_i7.PaymentModel>?>.value(),
      ) as _i4.Future<List<_i7.PaymentModel>?>);

  @override
  _i4.Future<void> cachePrivacySettings(
    String? userId,
    _i8.PrivacySettings? settings,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #cachePrivacySettings,
          [
            userId,
            settings,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i8.PrivacySettings?> getCachedPrivacySettings(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCachedPrivacySettings,
          [userId],
        ),
        returnValue: _i4.Future<_i8.PrivacySettings?>.value(),
      ) as _i4.Future<_i8.PrivacySettings?>);

  @override
  _i4.Future<void> cacheRankings(
    _i9.RankingType? type,
    List<_i9.RankingEntry>? rankings,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheRankings,
          [
            type,
            rankings,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i9.RankingEntry>?> getCachedRankings(
          _i9.RankingType? type) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCachedRankings,
          [type],
        ),
        returnValue: _i4.Future<List<_i9.RankingEntry>?>.value(),
      ) as _i4.Future<List<_i9.RankingEntry>?>);

  @override
  _i4.Future<void> cacheSubscriptionPlans(List<_i10.SubscriptionPlan>? plans) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheSubscriptionPlans,
          [plans],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i10.SubscriptionPlan>?> getCachedSubscriptionPlans() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCachedSubscriptionPlans,
          [],
        ),
        returnValue: _i4.Future<List<_i10.SubscriptionPlan>?>.value(),
      ) as _i4.Future<List<_i10.SubscriptionPlan>?>);

  @override
  _i4.Future<void> cacheSubscriptionStatus(
    String? userId,
    _i11.SubscriptionStatusModel? status,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheSubscriptionStatus,
          [
            userId,
            status,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i11.SubscriptionStatusModel?> getCachedSubscriptionStatus(
          String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCachedSubscriptionStatus,
          [userId],
        ),
        returnValue: _i4.Future<_i11.SubscriptionStatusModel?>.value(),
      ) as _i4.Future<_i11.SubscriptionStatusModel?>);

  @override
  _i4.Future<void> cacheVideo(_i12.YouTubeVideo? video) => (super.noSuchMethod(
        Invocation.method(
          #cacheVideo,
          [video],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i12.YouTubeVideo?> getCachedVideo(String? videoId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCachedVideo,
          [videoId],
        ),
        returnValue: _i4.Future<_i12.YouTubeVideo?>.value(),
      ) as _i4.Future<_i12.YouTubeVideo?>);

  @override
  _i4.Future<void> cacheSearchResults(
    String? query,
    List<_i12.YouTubeVideo>? videos,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheSearchResults,
          [
            query,
            videos,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i12.YouTubeVideo>?> getCachedSearchResults(String? query) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCachedSearchResults,
          [query],
        ),
        returnValue: _i4.Future<List<_i12.YouTubeVideo>?>.value(),
      ) as _i4.Future<List<_i12.YouTubeVideo>?>);

  @override
  _i4.Future<void> clearUserCache(String? userId) => (super.noSuchMethod(
        Invocation.method(
          #clearUserCache,
          [userId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> clearAllCache() => (super.noSuchMethod(
        Invocation.method(
          #clearAllCache,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [Logger].
///
/// See the documentation for Mockito's code generation for more information.
class MockLogger extends _i1.Mock implements _i13.Logger {
  MockLogger() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> log(
    _i13.LogLevel? level,
    String? message, {
    Object? error,
    StackTrace? stackTrace,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #log,
          [
            level,
            message,
          ],
          {
            #error: error,
            #stackTrace: stackTrace,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> debug(String? message) => (super.noSuchMethod(
        Invocation.method(
          #debug,
          [message],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> info(String? message) => (super.noSuchMethod(
        Invocation.method(
          #info,
          [message],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> warning(String? message) => (super.noSuchMethod(
        Invocation.method(
          #warning,
          [message],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> error(
    String? message, {
    Object? error,
    StackTrace? stackTrace,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #error,
          [message],
          {
            #error: error,
            #stackTrace: stackTrace,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> clearLogs() => (super.noSuchMethod(
        Invocation.method(
          #clearLogs,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
