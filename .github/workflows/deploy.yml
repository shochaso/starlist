name: Deploy to Production

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Verify Environment Variables
        run: |
          echo "Checking environment variables..."
          if [ -z "${{ secrets.SUPABASE_ACCESS_TOKEN }}" ]; then
            echo "‚ùå SUPABASE_ACCESS_TOKEN is not set"
            exit 1
          fi
          if [ -z "${{ secrets.SUPABASE_PROJECT_ID }}" ]; then
            echo "‚ùå SUPABASE_PROJECT_ID is not set"  
            exit 1
          fi
          echo "‚úÖ Required environment variables are set"

      - name: Authenticate with Supabase
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        run: |
          echo "Authenticating with Supabase..."
          # „Ç¢„ÇØ„Çª„Çπ„Éà„Éº„ÇØ„É≥„ÅÆÂΩ¢Âºè„ÇíÁ¢∫Ë™ç
          if [[ ! "$SUPABASE_ACCESS_TOKEN" =~ ^sbp_ ]]; then
            echo "‚ùå Invalid access token format. Access token should start with 'sbp_'"
            echo "Please generate a Personal Access Token from: https://supabase.com/dashboard/account/tokens"
            exit 1
          fi
          # Ë™çË®ºÂÆüË°å
          echo "$SUPABASE_ACCESS_TOKEN" | supabase auth login --token
          echo "‚úÖ Authentication successful"

      - name: Link Supabase Project
        env:
          SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}
        run: |
          echo "Linking to Supabase project: $SUPABASE_PROJECT_ID"
          supabase link --project-ref "$SUPABASE_PROJECT_ID"
          echo "‚úÖ Project linking successful"

      - name: Apply Database Migrations
        env:
          SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
        run: |
          echo "Applying database migrations..."
          supabase db push
          echo "‚úÖ Database migrations applied successfully"

      - name: Update Task Status
        run: |
          if [ -f "./scripts/task_completion_check.sh" ]; then
            echo "Executing task completion check..."
            chmod +x ./scripts/task_completion_check.sh
            ./scripts/task_completion_check.sh
          else
            echo "Task completion script not found, skipping..."
          fi
          
      - name: Deploy Flutter Web (if applicable)
        run: |
          echo "Web deployment configuration is not yet implemented"
          echo "This step will be configured in future updates"

      - name: Deployment Summary
        if: success()
        run: |
          echo "üéâ Deployment completed successfully!"
          echo "‚úÖ Database migrations applied"
          echo "‚úÖ Task status updated"
          echo "üì± Starlist backend deployment complete"
